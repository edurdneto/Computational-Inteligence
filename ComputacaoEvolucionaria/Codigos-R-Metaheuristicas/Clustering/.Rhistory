source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
library(tgp)
X <- seq(0,1,length=50)
XX <- seq(0,1,length=99)
Z <- 1 + 2*X + rnorm(length(X),sd=0.25)
out <- blm(X=X, Z=Z, XX=XX) # try Linear Model
plot(out) # plot the surface
exp2d.data <- exp2d.rand()
X <- exp2d.data$X; Z <- exp2d.data$Z
XX <- exp2d.data$XX
out <- bgp(X=X, Z=Z, XX=XX, corr="e
xp")"
)))
""
out <- bgp(X=X, Z=Z, XX=XX, corr="exp")
plot(out)
out <- btgpllm(X=X, Z=Z, XX=XX, corr="exp")
plot(out) # plot the surface
tgp.trees(out)
out <- btgp(X=X, Z=Z, XX=XX, corr="exp")
plot(out) # plot the surface
tgp.trees(out)
?tgp
require(MASS)
out <- bgp(X=mcycle[,1], Z=mcycle[,2])
plot(out) # plot the surface
out <- btgp(X=mcycle[,1], Z=mcycle[,2])
plot(out) # plot the surface
out <- btgpllm(X=mcycle[,1], Z=mcycle[,2], bprior="b0")
plot(out) # plot the surface
tgp.trees(out) # plot the MAP trees
?btgpllm
setwd("~/Doutorado/R/Metaheuristics/Clustering")
rm(list=ls())
library(cluster)
library(ggplot2)
library(animation)
library(compiler)
library(clusterCrit)
library(scatterplot3d)
library(grid)
source("../Algoritmos/sa.R")
source("../Algoritmos/hs.R")
source("../Algoritmos/ga.R")
source("../Algoritmos/de.R")
source("../Algoritmos/cs.R")
source("../Algoritmos/pso.R")
source("../Algoritmos/fa.R")
source("../Algoritmos/abc.R")
setFigureParams <- function( font="timesnewroman" ){
theme_set( theme_bw( base_size = 35, base_family=font ) )
theme_update( axis.title.y=element_text( angle=90, vjust=0.3 ),
axis.title.x=element_text( vjust=0 ),
plot.title = element_text( size=rel(0.8) ),
legend.title=element_blank(), legend.key=element_rect(colour="white"), legend.position="top",
legend.margin = unit(0, "line"), plot.margin = unit(c(0,0.5,0.5,0.5), "lines") )
}
setFigureParams()
saveFigure <- function( fig, figName, plot=FALSE, main="", outDir=getwd(), width=1024, height=768, eps=TRUE ){
while( dev.cur() != 1 ){ dev.off() }
png( filename=paste(figName,".png",sep=""), width, height )
if( plot ){
par( family="timesnewroman", cex.axis=2, cex.lab=2, cex.main=2 )
plot(fig, main=main, lwd=4)
} else{
print(fig)
}
while( dev.cur() != 1 ){ dev.off() }
if( eps ){
system( paste( "sam2p ", figName, ".png EPS: ", figName, ".eps", sep="" ), ignore.stdout=TRUE, ignore.stderr=TRUE )
}
}
colorVector <- c("black","red","blue","darkgreen","magenta","cyan4","darkgray","brown","darkslategray","darkblue")
plotProjectedClustering <- function( clusterIndex, filename ){
sortIndex <- sort.int( table( clusterIndex ), decreasing=TRUE, index.return=TRUE )$ix
clusterIndexAux <- clusterIndex
for( i in 1:length(unique(clusterIndex)) ){
clusterIndexAux[ clusterIndex == sortIndex[i] ] <- i
}
saveFigure( scatterplot3d( dataPCA[,1], dataPCA[,2], dataPCA[,3], box=FALSE, pch=20, color=colorVector[clusterIndexAux], angle=45,
cex.symbols=2.5, tick.marks=FALSE, axis=FALSE, #grid=FALSE,
xlab="", ylab="", zlab="" ),
figName=filename, eps=FALSE )
}
optimizeFlag <- FALSE
k <- 5
findK <- TRUE
kMax <- 10
extractCentr <- cmpfun( function( x ){
if( findK ){
activeClusterIndex <- which( x[1:kMax] > 0.5 )
k <- length( activeClusterIndex )
}
centrMatrix <- matrix( 0, k, d )
for( j in 1:k ){
if( findK ){
centrMatrix[j,] <- x[((activeClusterIndex[j]-1)*d+1+kMax):(activeClusterIndex[j]*d+kMax)]
} else{
centrMatrix[j,] <- x[((j-1)*d+1):(j*d)]
}
}
centrMatrix
} )
findCentr <- cmpfun( function( data, centrMatrix ){
max.col( - apply( centrMatrix, 1, function(centr) apply( data, 1, function(p) sum( (p - centr)^2 ) ) ), ties.method="first" )
} )
fixSolution <- cmpfun( function( x ){
if( findK ){
# Verifica se hÃ¡ pelo menos 2 clusters ativos
activeClusterIndex <- which( x[1:kMax] > 0.5 )
k <- length( activeClusterIndex )
if( k == 0 ){
ind <- sample(kMax,2)
x[ind] <- runif(2, min=0.5, max=1)
k <- 2
} else if( k == 1 ){
ind <- sample((1:kMax)[-activeClusterIndex],1)
x[ind] <- runif(1, min=0.5, max=1)
k <- 2
}
activeClusterIndex <- which( x[1:kMax] > 0.5 )
}
# Verifica se cada cluster possui pelo menos 2 elementos
centrMatrix <- extractCentr(x)
clusterIndex <- findCentr( data, centrMatrix )
if( sum( table(clusterIndex) < 2 ) || length(table(clusterIndex)) < k ){
#     nK <- floor( nrow(data) / k )
#     if( findK ){
#       lower <- c( rep(0, kMax), rep( apply( data, 2, min ), kMax) )
#       upper <- c( rep(1, kMax), rep( apply( data, 2, max ), kMax) )
#     } else{
#       lower <- c( rep( rep( apply( data, 2, min ), k) ) )
#       upper <- c( rep( rep( apply( data, 2, max ), k) ) )
#     }
#     while( sum( table(clusterIndex) < 2 ) || length(table(clusterIndex)) < k ){
# #             randomIndex <- sample(nrow(data))
# #             for( i in 1:length(activeClusterIndex) ){
# #               x[(kMax+1+d*(activeClusterIndex[i]-1)):(kMax+d*activeClusterIndex[i])] <- colMeans( data[randomIndex[((i-1)*nK+1):(nK*i)], ,drop=FALSE] )
# #             }
#
#       if( findK ){
#         for( i in 1:length(activeClusterIndex) ){
#           x[(kMax+1+d*(activeClusterIndex[i]-1)):(kMax+d*activeClusterIndex[i])] <- data[ sample(nrow(data),1), ]
#         }
#       } else{
#         for( i in 1:k ){
#           x[(1+d*(i-1)):(d*i)] <- data[ sample(nrow(data),1), ]
#         }
#       }
#
# #       x <- sapply( 1:length(lower), function(i) runif( 1, min=lower[i], max=upper[i] ) )
# #       activeClusterIndex <- which( x[1:kMax] > 0.5 )
# #
# #       if( findK ){
# #         k <- length( activeClusterIndex )
# #         if( k == 0 ){
# #           ind <- sample(kMax,2)
# #           x[ind] <- runif(2, min=0.5, max=1)
# #           k <- 2
# #         } else if( k == 1){
# #           ind <- sample((1:kMax)[-activeClusterIndex],1)
# #           x[ind] <- runif(1, min=0.5, max=1)
# #           k <- 2
# #         }
# #       } else{
# #         if( length( activeClusterIndex ) < k ){
# #           ind <- sample((1:k)[-activeClusterIndex], k - length( activeClusterIndex ))
# #           x[ind] <- runif(k - length( activeClusterIndex ), min=0.5, max=1)
# #         } else if( length( activeClusterIndex ) > k ){
# #           ind <- sample(activeClusterIndex, length( activeClusterIndex ) - k)
# #           x[ind] <- runif(length( activeClusterIndex ) - k, min=0, max=0.49)
# #         }
# #       }
#
#       centrMatrix <- extractCentr(x)
#       clusterIndex <- findCentr( data, centrMatrix )
#     }
kMeansClusterIndex <- kmeans( data, length(activeClusterIndex) )$centers
for( i in 1:length(activeClusterIndex) ){
x[(kMax+1+d*(activeClusterIndex[i]-1)):(kMax+d*activeClusterIndex[i])] <- kMeansClusterIndex[i,]
}
}
x
} )
calcCS <- cmpfun( function( x=NULL, centrMatrix=NULL, centrFromData=TRUE ){
if( is.null(centrMatrix) ){
centrMatrix <- extractCentr(x)
}
clusterIndex <- findCentr( data, centrMatrix )
k <- nrow(centrMatrix)
if( centrFromData == TRUE ){
centrMatrix <- matrix( 0, nrow=k, ncol=ncol(data) )
for( i in 1:k ){
centrMatrix[i,] <- colMeans( data[ clusterIndex == i, , drop=FALSE ] )
}
}
distClusterCentr <- as.matrix( dist( centrMatrix ) )
num <- 0
den <- 0
for( i in 1:k ){
indexK <- which( clusterIndex == i )
auxSum <- 0
for( j in indexK ){
auxSum <- auxSum + max( distMatrix[j, indexK] )
}
num <- num + auxSum / length(indexK)
den <- den + min( distClusterCentr[i,(1:k)[-i]] )
}
metric <- num / den
metric
} )
calcDB2 <- cmpfun( function( x=NULL, centrMatrix=NULL, centrFromData=FALSE ){
if( is.null(centrMatrix) ){
centrMatrix <- extractCentr(x)
}
clusterIndex <- findCentr( data, centrMatrix )
k <- nrow(centrMatrix)
if( centrFromData == TRUE ){
centrMatrix <- matrix( 0, nrow=k, ncol=ncol(data) )
for( i in 1:k ){
centrMatrix[i,] <- colMeans( data[ clusterIndex == i, , drop=FALSE ] )
}
}
distClusterCentr <- as.matrix( dist( centrMatrix ) )
sVector <- rep(0, k)
for( i in 1:k ){
dataK <- data[ clusterIndex == i, , drop=FALSE ]
nK <- nrow(dataK)
centr <- centrMatrix[i,]
for( j in 1:nK ){
sVector[i] <- sVector[i] + sum( ( dataK[j,] - centr )^2 )
}
sVector[i] <- sqrt( sVector[i] / nK )
}
rVector <- rep(0, k)
for( i in 1:k ){
rVector[i] <- max( (sVector[i] + sVector[-i]) / distClusterCentr[i, (1:k)[-i]] )
}
metric <- mean(rVector)
metric
} )
calcDB <- function( x=NULL, centrMatrix=NULL, centrFromData=FALSE ){
if( is.null(centrMatrix) ){
centrMatrix <- extractCentr(x)
}
clusterIndex <- findCentr( data, centrMatrix )
as.numeric( intCriteria( data, clusterIndex, "Davies_Bouldin" ) )
}
calcSI2 <- cmpfun( function( x=NULL, centrMatrix=NULL ){
if( is.null(centrMatrix) ){
centrMatrix <- extractCentr(x)
}
k <- nrow(centrMatrix)
clusterIndex <- findCentr( data, centrMatrix )
listIndexCentr <- list()
for( i in 1:k ){
listIndexCentr[[i]] <- which( clusterIndex == i )
}
s <- 0
for( i in 1:k ){
indexK <- listIndexCentr[[i]]
a <- sapply( 1:length(indexK), function(j) mean(distMatrix[ indexK[j], indexK[-j] ])  )
b <- matrix(0,  k, length(indexK))
for( p in (1:k)[-i] ){
b[p,] <- sapply( 1:length(indexK), function(j) mean(distMatrix[ indexK[j], listIndexCentr[[p]] ])  )
}
b <- apply( b[-i,,drop=FALSE], 2, min )
s <- s + sum( ifelse( a < b, 1 - a/b, b/a - 1 ) )
}
metric <- s / nrow(data)
-metric
} )
calcSI <- function( x=NULL, centrMatrix=NULL, centrFromData=FALSE ){
if( is.null(centrMatrix) ){
centrMatrix <- extractCentr(x)
}
clusterIndex <- findCentr( data, centrMatrix )
- as.numeric( intCriteria( data, clusterIndex, "Silhouette" ) )
}
calcTR2 <- cmpfun( function( x=NULL, centrMatrix=NULL, centrFromData=FALSE ){
if( is.null(centrMatrix) ){
centrMatrix <- extractCentr(x)
}
k <- nrow(centrMatrix)
clusterIndex <- findCentr( data, centrMatrix )
meanVector <- colMeans( data )
sW <- matrix( 0, nrow=ncol(data), ncol=ncol(data) )
sB <- matrix( 0, nrow=ncol(data), ncol=ncol(data) )
for( i in 1:k ){
dataK <- data[ clusterIndex == i, ]
if( centrFromData == FALSE ){
centr <- centrMatrix[i,]
} else{
centr <- colMeans(dataK)
}
nK <- nrow(dataK)
for( j in 1:nK ){
aux <- as.matrix( dataK[j,] - centr )
sW <- sW + aux %*% t(aux)
}
if( centrFromData == FALSE ){
aux <- centr - meanVector
} else{
aux <- colMeans(dataK) - meanVector
}
sB <- sB + (nK/nrow(data)) * aux %*% t(aux)
}
sW <- sW / nrow(data)
metric <- sum( diag( solve(sW) %*% sB ) )
-metric
} )
calcTR <- function( x=NULL, centrMatrix=NULL, centrFromData=FALSE ){
if( is.null(centrMatrix) ){
centrMatrix <- extractCentr(x)
}
clusterIndex <- findCentr( data, centrMatrix )
- as.numeric( intCriteria( data, clusterIndex, "Trace_W" ) )
}
calcPBM <- function( x=NULL, centrMatrix=NULL, centrFromData=FALSE ){
if( is.null(centrMatrix) ){
centrMatrix <- extractCentr(x)
}
clusterIndex <- findCentr( data, centrMatrix )
- as.numeric( intCriteria( data, clusterIndex, "PBM" ) )
}
calcMeanIntra <- function( x=NULL, centrMatrix=NULL, centrFromData=TRUE ){
if( is.null(centrMatrix) ){
centrMatrix <- extractCentr(x)
}
clusterIndex <- findCentr( data, centrMatrix )
K <- nrow(centrMatrix)
if( centrFromData == TRUE ){
centrMatrix <- matrix( 0, nrow=K, ncol=ncol(data) )
for( i in 1:K ){
centrMatrix[i,] <- colMeans( data[ clusterIndex == i, , drop=FALSE ] )
}
}
meanIntra <- 0
for( i in 1:K ){
dataK <- data[ which( clusterIndex == i ), , drop=FALSE]
nK <- nrow(dataK)
centr <- centrMatrix[i,]
meanDistK <- 0
for( j in 1:nK ){
meanDistK <- meanDistK + sqrt( sum( ( dataK[j,] - centr )^2 ) )
}
meanDistK <- meanDistK / nK
meanIntra <- meanIntra + meanDistK
}
meanIntra <- meanIntra / K
meanIntra
}
calcMeanInter <- function( x=NULL, centrMatrix=NULL, centrFromData=TRUE ){
if( is.null(centrMatrix) ){
centrMatrix <- extractCentr(x)
}
clusterIndex <- findCentr( data, centrMatrix )
K <- nrow(centrMatrix)
if( centrFromData == TRUE ){
centrMatrix <- matrix( 0, nrow=K, ncol=ncol(data) )
for( i in 1:K ){
centrMatrix[i,] <- colMeans( data[ clusterIndex == i, , drop=FALSE ] )
}
}
meanInter <- sum( dist( centrMatrix ) ) / (2*(K-1))
meanInter
}
optKMeans <- function( maxK, index="Davies_Bouldin" ){
resList <- list()
value <- rep(0, maxK-2)
for( i in 2:(maxK-1) ){
resList[[length(resList)+1]] <- kmeans(data, i, nstart=100)
value[i-1] <- as.numeric( intCriteria( data, resList[[length(resList)]]$cluster, index ) ) # Davies_Bouldin, Silhouette
}
resList[[ bestCriterion( value, index ) ]] # Davies_Bouldin, PBM
}
plotClustering <- function( x=NULL, centrMatrix=NULL, title="" ){
if( is.null(centrMatrix) ){
centrMatrix <- extractCentr( x )
}
k <- nrow(centrMatrix)
clusterIndex <- findCentr( data, centrMatrix )
df <- data.frame( x=data[,1], y=data[,2] )
dfCentr <- data.frame( x=centrMatrix[,1], y=centrMatrix[,2] )
g <- ggplot() +
geom_point( aes(x,y), df, size=2, colour=factor(clusterIndex) ) +
geom_point( aes(x,y), dfCentr, size=6, colour=factor(1:k) ) +
ggtitle(title)
g
}
printSummary <- function( centrMatrix ){
dataRange <- apply( data, 2, range )
labelRange <- apply( dataRange, 2, function(x) seq(x[1], x[2], length.out=6) )
factorList <- gl( n=5, k=1, length=5, labels=c("VS", "S", "M", "L", "VL") )
labelMatrix <- data.frame()
for( i in 1: nrow(centrMatrix) ){
for( j in 1:ncol(centrMatrix) ){
if( centrMatrix[i,j] >= labelRange[1,j] && centrMatrix[i,j] < labelRange[2,j] ){
labelMatrix[i,j] <- factorList[1]
} else if( centrMatrix[i,j] >= labelRange[2,j] && centrMatrix[i,j] < labelRange[3,j] ){
labelMatrix[i,j] <- factorList[2]
} else if( centrMatrix[i,j] >= labelRange[3,j] && centrMatrix[i,j] < labelRange[4,j] ){
labelMatrix[i,j] <- factorList[3]
} else if( centrMatrix[i,j] >= labelRange[4,j] && centrMatrix[i,j] < labelRange[5,j] ){
labelMatrix[i,j] <- factorList[4]
} else if( centrMatrix[i,j] >= labelRange[5,j] && centrMatrix[i,j] <= labelRange[6,j] ){
labelMatrix[i,j] <- factorList[5]
}
}
}
labelMatrix
}
printStatistics <- function( clusterIndex ){
sortIndex <- sort.int( table( clusterIndex ), decreasing=TRUE, index.return=TRUE )$ix
clusterIndexAux <- clusterIndex
for( i in 1:length(unique(clusterIndex)) ){
clusterIndexAux[ clusterIndex == sortIndex[i] ] <- i
}
clusterIndex <- clusterIndexAux
for( i in 1:length(unique(clusterIndex)) ){
dataK <- dataOriginal[ clusterIndex == i ,]
print( paste("[",i,"] - Mean = ", paste(colMeans( dataK ), collapse=", "), sep="" ), quote=FALSE )
print( paste("[",i,"] - STD = ", paste( apply( dataK, 2, sd ) , collapse=", "), sep="" ), quote=FALSE )
print( paste("[",i,"] - MIN = ", paste( apply( dataK, 2, min ) , collapse=", "), sep="" ), quote=FALSE )
print( paste("[",i,"] - MAX = ", paste( apply( dataK, 2, max ) , collapse=", "), sep="" ), quote=FALSE )
print("", quote=FALSE)
}
}
optimizationAlgorithmList <- list()
# optimizationAlgorithmList[[length(optimizationAlgorithmList)+1]] <- list( fn=pso, name="PSO", numIter=1000 )
# optimizationAlgorithmList[[length(optimizationAlgorithmList)+1]] <- list( fn=abc, name="ABC", numIter=1000 )
# optimizationAlgorithmList[[length(optimizationAlgorithmList)+1]] <- list( fn=fa, name="FA", numIter=1000 )
# optimizationAlgorithmList[[length(optimizationAlgorithmList)+1]] <- list( fn=de, name="DE", numIter=1000 )
# optimizationAlgorithmList[[length(optimizationAlgorithmList)+1]] <- list( fn=ga, name="GA", numIter=1000 )
optimizationAlgorithmList[[length(optimizationAlgorithmList)+1]] <- list( fn=cs, name="CS", numIter=1000 )
# optimizationAlgorithmList[[length(optimizationAlgorithmList)+1]] <- list( fn=sa, name="SA", numIter=10000 )
fnList <- list()
# fnList[[length(fnList)+1]] <- list( fn=calcSI, name="SI" )
fnList[[length(fnList)+1]] <- list( fn=calcDB, name="DB" )
# fnList[[length(fnList)+1]] <- list( fn=calcCS, name="CS" )
# fnList[[length(fnList)+1]] <- list( fn=calcPBM, name="PBM" )
# Dados para teste
data <- as.matrix( read.table("./probal.dat") )[,1:5]
